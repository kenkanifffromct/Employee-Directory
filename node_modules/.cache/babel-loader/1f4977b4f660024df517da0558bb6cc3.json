{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kenneth-Keller\\\\Bootcamp\\\\Homework\\\\Employee-Directory\\\\src\\\\components\\\\ListHeader\\\\index.js\";\nimport React, { Component } from \"react\";\nimport Searchbar from \"./Searchbar/index.js\";\nimport Employees from \"../Employees/index.js\";\nimport API from \"../../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ListHeader extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      employees: [],\n      filteredEmployees: [],\n      sortDirections: this.initialSortDirections\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      this.setState({\n        search: value\n      });\n      this.filterEmployees(value.toLowerCase().trim());\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n    };\n\n    this.sortBy = (key, primary = 0, secondary = 0) => {\n      let sortedEmployees = this.state.filteredEmployees;\n\n      if (this.state.sortDirections[key]) {\n        this.setState({\n          filteredEmployees: sortedEmployees.reverse(),\n          sortDirections: { ...this.initialSortDirections,\n            [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\"\n          }\n        });\n      } else {\n        sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\n          a = a[key];\n          b = b[key]; // If secondary comparison given and primary comparison is equal\n          // Example: Sorting by last name, if last names are equal, then sort that instance by first name instead.\n\n          if (primary) {\n            if (secondary && a[primary] === b[primary]) {\n              return a[secondary].localeCompare(b[secondary]);\n            }\n\n            return a[primary].localeCompare(b[primary]);\n          } else {\n            return a.localeCompare(b);\n          }\n        });\n        this.setState({\n          filteredEmployees: sortedEmployees,\n          sortDirections: { ...this.initialSortDirections,\n            [key]: \"asc\"\n          }\n        });\n      }\n    };\n\n    this.filterEmployees = input => {\n      if (input) {\n        this.setState({\n          filteredEmployees: this.state.employees.filter(employee => {\n            return employee.name.first.toLowerCase().concat(\" \", employee.name.last.toLowerCase()).includes(input) || employee.phone.includes(input) || employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) || employee.email.includes(input) || this.formatDate(employee.dob.date).includes(input);\n          })\n        });\n      } else {\n        this.setState({\n          filteredEmployees: this.state.employees\n        });\n      }\n    };\n\n    this.formatDate = date => {\n      date = new Date(date);\n      let dob = [];\n      dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n      dob.push((\"0\" + date.getDate()).slice(-2));\n      dob.push(date.getFullYear()); // Join formatted date\n\n      return dob.join(\"-\");\n    };\n  }\n\n  get initialSortDirections() {\n    return {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      dob: \"\"\n    };\n  } // When this component mounts, load random users as employees from https://randomuser.me/\n\n\n  componentDidMount() {\n    API.getEmployees().then(res => this.setState({\n      employees: res.data.results,\n      filteredEmployees: res.data.results\n    })).catch(err => console.log(err));\n  } // Update search state to filter by employee name\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n        value: this.state.search,\n        handleInputChange: this.handleInputChange,\n        handleFormSubmit: this.handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-4\",\n        children: /*#__PURE__*/_jsxDEV(Employees, {\n          state: this.state,\n          sortBy: this.sortBy,\n          filterEmployees: this.filterEmployees,\n          formatDate: this.formatDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ListHeader;","map":{"version":3,"sources":["C:/Users/Kenneth-Keller/Bootcamp/Homework/Employee-Directory/src/components/ListHeader/index.js"],"names":["React","Component","Searchbar","Employees","API","ListHeader","state","search","employees","filteredEmployees","sortDirections","initialSortDirections","handleInputChange","event","value","target","setState","filterEmployees","toLowerCase","trim","handleFormSubmit","preventDefault","sortBy","key","primary","secondary","sortedEmployees","reverse","sort","a","b","localeCompare","input","filter","employee","name","first","concat","last","includes","phone","replace","email","formatDate","dob","date","Date","push","getMonth","slice","getDate","getFullYear","join","componentDidMount","getEmployees","then","res","data","results","catch","err","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Searchbar from \"./Searchbar/index.js\";\r\nimport Employees from \"../Employees/index.js\";\r\nimport API from \"../../utils/api\";\r\n\r\nclass ListHeader extends Component {\r\n  state = {\r\n    search: \"\",\r\n    employees: [],\r\n    filteredEmployees: [],\r\n    sortDirections: this.initialSortDirections,\r\n  };\r\n\r\n  get initialSortDirections() {\r\n    return {\r\n      name: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      dob: \"\",\r\n    };\r\n  }\r\n\r\n  // When this component mounts, load random users as employees from https://randomuser.me/\r\n  componentDidMount() {\r\n    API.getEmployees()\r\n      .then((res) =>\r\n        this.setState({\r\n          employees: res.data.results,\r\n          filteredEmployees: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  // Update search state to filter by employee name\r\n  handleInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ search: value });\r\n    this.filterEmployees(value.toLowerCase().trim());\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  // Sort with the key of specified object.\r\n  // If key has children, sort by primary child and optionally a secondary child. i.e. sort by last name, then first.\r\n  sortBy = (key, primary = 0, secondary = 0) => {\r\n    let sortedEmployees = this.state.filteredEmployees;\r\n    if (this.state.sortDirections[key]) {\r\n      this.setState({\r\n        filteredEmployees: sortedEmployees.reverse(),\r\n        sortDirections: {\r\n          ...this.initialSortDirections,\r\n          [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\",\r\n        },\r\n      });\r\n    } else {\r\n      sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\r\n        a = a[key];\r\n        b = b[key];\r\n\r\n        // If secondary comparison given and primary comparison is equal\r\n        // Example: Sorting by last name, if last names are equal, then sort that instance by first name instead.\r\n        if (primary) {\r\n          if (secondary && a[primary] === b[primary]) {\r\n            return a[secondary].localeCompare(b[secondary]);\r\n          }\r\n          return a[primary].localeCompare(b[primary]);\r\n        } else {\r\n          return a.localeCompare(b);\r\n        }\r\n      });\r\n\r\n      this.setState({\r\n        filteredEmployees: sortedEmployees,\r\n        sortDirections: {\r\n          ...this.initialSortDirections,\r\n          [key]: \"asc\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  filterEmployees = (input) => {\r\n    if (input) {\r\n      this.setState({\r\n        filteredEmployees: this.state.employees.filter((employee) => {\r\n          return (\r\n            employee.name.first\r\n              .toLowerCase()\r\n              .concat(\" \", employee.name.last.toLowerCase())\r\n              .includes(input) ||\r\n            employee.phone.includes(input) ||\r\n            employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) ||\r\n            employee.email.includes(input) ||\r\n            this.formatDate(employee.dob.date).includes(input)\r\n          );\r\n        }),\r\n      });\r\n    } else {\r\n      this.setState({ filteredEmployees: this.state.employees });\r\n    }\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    date = new Date(date);\r\n    let dob = [];\r\n    dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\r\n    dob.push((\"0\" + date.getDate()).slice(-2));\r\n    dob.push(date.getFullYear());\r\n\r\n    // Join formatted date\r\n    return dob.join(\"-\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Searchbar\r\n          value={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n        />\r\n        <div className=\"container mt-4\">\r\n          <Employees\r\n            state={this.state}\r\n            sortBy={this.sortBy}\r\n            filterEmployees={this.filterEmployees}\r\n            formatDate={this.formatDate}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListHeader;"]},"metadata":{},"sourceType":"module"}